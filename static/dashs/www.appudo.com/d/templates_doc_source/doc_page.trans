{
    history:{{[
  {
    "t": "templates_doc/node_install",
    "s": "templates_doc_source/node_install.html"
  },
  {
    "t": "templates_doc/faq",
    "s": "templates_doc_source/faq.html"
  },
  {
    "t": "templates_doc/first_steps",
    "s": "templates_doc_source/first_steps.html"
  },
  {
    "t": "templates_doc/node_dash",
    "s": "templates_doc_source/node_dash.html"
  },
  {
    "t": "templates_doc/examples",
    "s": "templates_doc_source/examples.html"
  },
  {
    "t": "templates_doc/about",
    "s": "templates_doc_source/about.html"
  },
  {
    "t": "templates_doc/eula",
    "s": "templates_doc_source/eula.html"
  },
  {
    "t": "templates_doc/opensource",
    "s": "templates_doc_source/opensource.html"
  },
  {
    "t": "templates_doc/examples_appudo",
    "s": "templates_doc_source/examples_appudo.html"
  },
  {
    "t": "templates_doc/api_http",
    "s": "templates_doc_source/api_http.html"
  },
  {
    "t": "templates_doc/api_mail",
    "s": "templates_doc_source/api_mail.html"
  },
  {
    "t": "templates_doc/api_pdf",
    "s": "templates_doc_source/api_pdf.html"
  },
  {
    "t": "templates_doc/examples_blog",
    "s": "templates_doc_source/examples_blog.html"
  },
  {
    "t": "templates_doc/examples_stream",
    "s": "templates_doc_source/examples_stream.html"
  },
  {
    "t": "templates_doc/examples_file",
    "s": "templates_doc_source/examples_file.html"
  },
  {
    "t": "templates_doc/page_skin",
    "s": "templates_doc_source/page_skin.html"
  },
  {
    "t": "templates_doc/page_tmpl",
    "s": "templates_doc_source/page_tmpl.html"
  },
  {
    "t": "templates_doc/proc_rotate",
    "s": "templates_doc_source/proc_rotate.html"
  },
  {
    "t": "templates_doc/proc_stats",
    "s": "templates_doc_source/proc_stats.html"
  },
  {
    "t": "templates_doc/run_msg",
    "s": "templates_doc_source/run_msg.html"
  },
  {
    "t": "templates_doc/ws_data",
    "s": "templates_doc_source/ws_data.html"
  },
  {
    "t": "templates_doc/ws_bc",
    "s": "templates_doc_source/ws_bc.html"
  },
  {
    "t": "templates_doc/async",
    "s": "templates_doc_source/async.html"
  },
  {
    "t": "templates_doc/hub",
    "s": "templates_doc_source/hub.html"
  },
  {
    "t": "templates_doc/ws_intercon",
    "s": "templates_doc_source/ws_intercon.html"
  },
  {
    "t": "templates_doc/benchmark",
    "s": "templates_doc_source/benchmark.html"
  },
  {
    "t": "templates_doc/edit",
    "s": "templates_doc_source/edit.html"
  },
  {
    "t": "templates_doc/zones",
    "s": "templates_doc_source/zones.html"
  },
  {
    "t": "templates_doc/entry_spaces",
    "s": "templates_doc_source/entry_spaces.html"
  },
  {
    "t": "templates_doc/hub_package",
    "s": "templates_doc_source/hub_package.html"
  },
  {
    "t": "templates_doc/static_files",
    "s": "templates_doc_source/static_files.html"
  },
  {
    "t": "templates_doc/nodomain",
    "s": "templates_doc_source/nodomain.html"
  }
]}},
    transform:function(intxt, inname, outname, result) {
    
        var cleanNode = function(n) {
            var children = n.childNodes;
            for(var i =0, l = children.length; i < l; i++) {
                if(children[i] && 
                   children[i].nodeType == 3 && 
                   !/\S/.test(children[i].nodeValue)) {
                    n.replaceChild(document.createTextNode(''), children[i]);
                } else if(children[i]) {
                    cleanNode(children[i]);
                }
            }
        }
    
        var m = outname.split('/');
        var b = m[m.length-1];
        m = 'doc+' + b;
            
        var findNav = function(o, r) {
            var n = Object.getOwnPropertyNames(r);
            for (var key in n) {
                var t = r[n[key]];
                if(typeof t == "string") {
                    if(o.found) {
                        o.next = t;
                        o.next_name = n[key];
                        return false;
                    } else {
                        if(t.endsWith(b)) {
                            o.found = true;
                        } else {
                            o.prev_name = n[key];
                            o.prev = t;
                        }
                    }
                }
                if(typeof t == "object"){
                    if(!findNav(o, t))
                        return false;
                }
            }
            return true;
        }
        
        var createNav = function(r){
            var o = {};
            var res = '';
            findNav(o, r);
            
            res += '<div class="nm">';
            if(o.prev) {
                res += '<a class="spf-link np" href="' + o.prev + '">' + o.prev_name + '</a>';
                res += '<a class="toc spf-link" href="/doc/">TOC</a>';
            }
            if(o.next) {
                res += '<a class="spf-link nn" href="' + o.next + '">' + o.next_name + '</a>';
            }
            res += '</div>';
            
            return res;
        }
    
        appudo.postPlain('/edit/8/3/'+appudo.random(), 'f=templates_doc_source/toc.js&i=0', function() {
        }).then(function(data){
            var jd = JSON.parse(data);
        
            var p1 = '';
            var p2 = '';
            var i18n = [];
            var stl = [];
            var srefs = [];
            var base = '';
            var node = dojo.create("div", {'style':'display:hidden;'});
            node.innerHTML = intxt;
            dojo.forEach(node.children, function(n, idx){
                if(n.tagName == 'STYLE') {
                    stl.push(n);
                    return;
                }
                if(n.id == 'i18nBase') {
                    base = ',i18nBase:\''+n.innerHTML.trim()+'\'';
                    return;
                }
                if(dojo.hasClass(n, 'style')){
                    srefs.push(n.id);
                }
                cleanNode(n);
                var inner = n.innerHTML;
                if(n.id == 'content') {
                    var nav = createNav(jd);
                    inner = inner.replace('###NAV###', nav);
                }
                inner = appudo.jsonEscape(inner, 0, inner.length);
                if(n.id == 'misc') {
                    inner = '<script>moduleCtx[\'' + m + '\']=function(){' + inner + '}();</script>'
                }
                p2 += '"' + n.id + '":"' + inner + '",';
                if(dojo.hasClass(n, 'i18n'))
                    i18n.push(n.id);
            });
            node.remove();
            p2 = p2.slice(0,-1);
            p1 += '{';
            if(stl.length != 0) {
                p1 += '"foot":"<style name=\\\"stl_' + m + '\\\">'
                dojo.forEach(stl, function(n, idx){
                    cleanNode(n);
                    var inner = n.innerHTML;
                    inner = appudo.jsonEscape(inner, 0, inner.length);
                    p1 += inner;
                });
                p1 += '</style>",';
            }
            p1 += '"body": {"minit":"<script>minit(\'' + m + '\',[\''+ i18n.join('\',\'') + '\'], {ideps:[\'doc+doc\'],srefs:[\''+ srefs.join('\',\'') + '\'],sid:\'stl_' + m + '\'' + base + '});</script>",';
            p2 += '}}';
            // TODO walk the top level items and create an spf template
            // add hidden div, walk children, get ids, build the json, remove hidden div
            result(p1 + p2);
        });	
    }
}