{
    history:{{[
  {
    "t": "pub/probe.html",
    "s": "templates_www_source/index.html"
  },
  {
    "t": "pub/noiesupport.html",
    "s": "templates_www_source/noiesupport.html"
  }
]}},
    transform:function(intxt, inname, outname, result) {
        
        var do_minify = false;
        
        var mini_opt = {
                          parse: {
                            bare_returns     : false,
                            ecma             : 8,
                            expression       : false,
                            filename         : null,
                            html5_comments   : true,
                            shebang          : true,
                            strict           : false,
                            toplevel         : null
                          },
                          compress: {
                            arrows           : true,
                            booleans         : true,
                            collapse_vars    : true,
                            comparisons      : true,
                            computed_props   : true,
                            conditionals     : true,
                            dead_code        : true,
                            drop_console     : false,
                            drop_debugger    : true,
                            ecma             : 5,
                            evaluate         : true,
                            expression       : false,
                            global_defs      : {},
                            hoist_funs       : false,
                            hoist_props      : true,
                            hoist_vars       : false,
                            ie8              : false,
                            if_return        : true,
                            inline           : true,
                            join_vars        : true,
                            keep_classnames  : false,
                            keep_fargs       : true,
                            keep_fnames      : false,
                            keep_infinity    : false,
                            loops            : true,
                            negate_iife      : true,
                            passes           : 1,
                            properties       : true,
                            pure_getters     : "strict",
                            pure_funcs       : null,
                            reduce_funcs     : true,
                            reduce_vars      : true,
                            sequences        : true,
                            side_effects     : true,
                            switches         : true,
                            top_retain       : null,
                            toplevel         : false,
                            typeofs          : true,
                            unsafe           : false,
                            unsafe_arrows    : false,
                            unsafe_comps     : false,
                            unsafe_Function  : false,
                            unsafe_math      : false,
                            unsafe_methods   : false,
                            unsafe_proto     : false,
                            unsafe_regexp    : false,
                            unsafe_undefined : false,
                            unused           : true,
                            warnings         : false
                          },
                          mangle: {
                            eval             : false,
                            ie8              : false,
                            keep_classnames  : false,
                            keep_fnames      : false,
                            properties       : false,
                            reserved         : [],
                            safari10         : false,
                            toplevel         : false
                          },
                          output: {
                            ascii_only       : false,
                            beautify         : false,
                            bracketize       : false,
                            comments         : /@license|@preserve|^!/,
                            ecma             : 5,
                            ie8              : false,
                            indent_level     : 4,
                            indent_start     : 0,
                            inline_script    : true,
                            keep_quoted_props: false,
                            max_line_len     : false,
                            preamble         : null,
                            preserve_line    : false,
                            quote_keys       : false,
                            quote_style      : 0,
                            safari10         : false,
                            semicolons       : true,
                            shebang          : true,
                            source_map       : null,
                            webkit           : false,
                            width            : 80,
                            wrap_iife        : false
                          },
                          wrap: false
                        };
        
        var docType = function(doc) {
            var dt = doc.doctype;
            return dt ? "<!DOCTYPE " + dt.name + (dt.publicId ? ' PUBLIC "' + dt.publicId + '"' : '') + (!dt.publicId && dt.systemId ? ' SYSTEM' : '') + (dt.systemId ? ' "' + dt.systemId + '"' : '') + '>' : '';
        }
    
        var ctx = {path:[]};
        var tmpl_data = '';
        var path = function() {
            return ctx.path.length ? ctx.path[ctx.path.length-1] : '';
        }
        
        var sid = 0;
        var waitImg = {};
        
        var patchImg = function(n) {
            var src = n.getAttribute('src');
            if(src.startsWith('./')) {
                src = src.substr(2);
            }
            src = 'pub/' + src;
            var data = waitImg[src];
            if(data) {
                console.log('patch', src);
                if(src.endsWith('.svg')) {
                    var div = document.createElement('div');
                    div.innerHTML = data.data;
                    var fc = div.firstChild;
                    while(fc) {
                        if(fc.nodeName.toUpperCase() == 'SVG') {
                            var wa = n.getAttribute('width');
                            var ha = n.getAttribute('height');
                            if(wa) {
                                fc.setAttribute('width', wa);
                            } else {
                                fc.removeAttribute('width');
                            }
                            if(ha) {
                                fc.setAttribute('height', ha);
                            } else {
                                fc.removeAttribute('height');
                            }
                        }
                        var ns = fc.nextSibling;
                        n.parentNode.insertBefore(fc, n);
                        fc = ns;
                    }
                    n.parentNode.removeChild(n);
                }
            }
        };
    
        var patchNode = function(n) {
            var children = n.childNodes || [];
            for(var i =0, l = children.length; i < l; i++) {
                var c = children[i];
                if(c) {
                    var has_path = c.hasAttribute && c.hasAttribute('path');
                    var has_nolinks = c.hasAttribute && c.hasAttribute('nolinks');
                    var mpath = null;
                    if(c.hasAttribute && c.hasAttribute('mpath')) {
                        mpath = c.getAttribute('mpath').split(' ');
                        c.removeAttribute('mpath');
                    }
                    if(has_path) {
                        ctx.path.push(c.getAttribute('path'));
                        c.removeAttribute('path');
                    }
                    if(has_nolinks) {
                        ctx.nolinks += 1;
                        c.removeAttribute('nolinks');
                    }
                    if(c.nodeType == 3 && 
                       !/\S/.test(c.nodeValue)) {
                        n.replaceChild(document.createTextNode(''), c);
                    } else {
                        if(c.nodeName == 'STYLE') {
                            if(do_minify) {
                                c.textContent = cssmin(c.textContent);
                            }
                            
                            if(has_path) {
                                c.id = '_msid' + sid;
                                
                                var inner = c.textContent;
                                inner = appudo.jsonEscape(inner, 0, inner.length);
                                tmpl_data = 'addS("' + path() + '", "' + c.id +'","' + inner + '"' +  (c.hasAttribute('end') ? ', true' : '') + ');' + tmpl_data;
                                  
                                if(mpath) {
                                    mpath.forEach(function(n) {
                                        tmpl_data = 'addS("' + n + '", "' + c.id +'", null' +  (c.hasAttribute('end') ? ', true' : '') + ');' + tmpl_data;
                                    });
                                }
                            
                                sid++;
                                c.parentNode.removeChild(c);
                                i--;
                                l--;
                            }
                        }
                        else if(c.nodeName == 'SCRIPT') {
                            if(do_minify) {
                                var m = minify(c.textContent, mini_opt);
                                c.textContent = m.code;
                            }
                            if(c.hasAttribute('remove')) {
                                c.parentNode.removeChild(c);    
                                i--;
                                l--;
                            } else
                            if(c.hasAttribute('inline')) {
                                c.removeAttribute('inline');
                            } else {
                                if(c.hasAttribute('always')) {
                                    tmpl_data = 'addA("' + path() + '", "", function(ctx, path, sub, load) { ' + c.textContent + ' });' + tmpl_data;
                                } else {
                                    tmpl_data = 'addJ("' + path() + '", "", function(ctx, path, sub) { ' + c.textContent + ' });' + tmpl_data;
                                }   
                                c.parentNode.removeChild(c);   
                                i--;
                                l--;
                            }
                        } else {
                            if(c.nodeName == 'IMG' && c.hasAttribute('inline')) {
                                c.removeAttribute('inline');
                                patchImg(c);
                            }
                            patchNode(c);
                        }
                    }
                    if(ctx.nolinks == 0 && c.hasAttribute && c.hasAttribute('href')) {
                        var href = c.getAttribute('href').trim();
                        if(href.substr(0, 11) === 'javascript:') {
                            c.setAttribute('href', "javascript:(function() {" + href.substr(11, href.length) + "}).call(getCtx('" + path() + "'))");
                        }
                    }
                    var dpl = '';
                    if(c.hasAttribute && c.hasAttribute('dpl')) {
                        dpl = c.getAttribute('dpl');
                    }
                    if(c.hasAttribute && c.hasAttribute('page_submit')) {
                        var submit = c.getAttribute('page_submit');
                        c.setAttribute('onsubmit', "(function(path, event) {" + submit + "}).call(this, getCtx('" + path() + "'), event)");
                        c.removeAttribute('page_submit')
                    }
                    if(c.hasAttribute && c.hasAttribute('page_click')) {
                        var submit = c.getAttribute('page_click');
                        c.setAttribute('onclick', "(function(path, event) {" + submit + "}).call(this, getCtx('" + path() + "'), event)");
                        c.removeAttribute('page_click');
                    }
                    if(c.hasAttribute && c.hasAttribute('template')) {
                        c.removeAttribute('template');
                        var txt = c.innerHTML;
                        var id = c.getAttribute('attach') || c.id;
                        txt = window.Handlebars.precompile(txt);
                        tmpl_data = 'addTmpl("' + path() + '", "' + id +'",' + txt + ',"' + dpl + '");' + tmpl_data;
                        c.setAttribute('style', 'display:none;' + (c.getAttribute('style') || ''));
                        c.innerHTML = '';
                        if(c.hasAttribute('attach')) {
                            c.parentNode.removeChild(c);     
                            i--;
                            l--;
                        }
                    }
                    if(has_nolinks) {
                        ctx.nolinks -= 1;
                    }
                    if(has_path) {
                        ctx.path.pop();
                    }
                }
            }
        }
        
        var r = /###.*?###/gm;
        var wait = [];
        var load = [];
        var dojo = appudo.getDojo();
        
        var fixTxt = function(tin) {
            var pos = 0;
            var out = "";
            if(wait.length == 0) {
                return tin
            }
            for(var i = 0; i < wait.length; i++) {
                var w = wait[i];
                out += tin.slice(pos, w.index);
                if(w.ty == 0) {
                    out += w.data;
                }
                pos = w.index + w.len + 6;
            }
            
            out += tin.slice(pos);
            return out;
        }
        
        var dowait = function(idx, after) {
            if(idx == wait.length) {
                after();
            } else {
                wait[idx].w.then(function(data) {
                    wait[idx].data = data;
                    dowait(idx + 1, after);
                });
            }
        }
        
        while((ma = r.exec(intxt)) != null) {
            try {
                var t = ma[0].slice(3, -3);
                var d = JSON.parse(t);
                var file = d.preload !== undefined ? d.preload : d.file;
                var ty = d.preload !== undefined ? 1 : 0;
                var data = {ty:ty,index:ma.index,len:t.length,w:appudo.postPlain('/edit/v1/8/3/'+appudo.random(), 'f=' + file + '&i=0', function() {
                })};
                if(ty == 1) {
                    waitImg[file] = data;
                }
                wait.push(data);
            } catch(e) {
            }
        }
        
        var loadwait = function(idx, after) {
            if(idx == load.length) {
                after();
            } else {
                load[idx].w.then(function(data) {
                    var head = document.getElementsByTagName("head")[0];
                    var el = document.createElement('script');
                    el.setAttribute('id', load[idx].id);
                    el.textContent = data;
                    head.insertBefore(el, head.firstChild);
                    loadwait(idx + 1, after);
                });
            }
        }
        
        var removeLoad = function() {
            for(var i = 0; i < load.length; i++) {
                var el = dojo.byId(load[i].id);
                if(el) {
                    el.remove();
                }
            }
        }
        
        window.module = window.exports = {};
        
        load.push({id:'js_handlebars',w:appudo.postPlain('/edit/v1/8/3/'+appudo.random(), 'f=template_js/handlebars-4.4.1.js&i=0', function() { })});
        load.push({id:'js_cssmin',w:appudo.postPlain('/edit/v1/8/3/'+appudo.random(), 'f=template_js/cssmin.js&i=0', function() { })});
        load.push({id:'ujs_minify',w:appudo.postPlain('/edit/v1/8/3/'+appudo.random(), 'f=template_js/minify.js&i=0', function() { })});
        load.push({id:'ujs_utils',w:appudo.postPlain('/edit/v1/8/3/'+appudo.random(), 'f=template_js/utils.js&i=0', function() { })});
        load.push({id:'ujs_ast',w:appudo.postPlain('/edit/v1/8/3/'+appudo.random(), 'f=template_js/ast.js&i=0', function() { })});
        load.push({id:'ujs_parse',w:appudo.postPlain('/edit/v1/8/3/'+appudo.random(), 'f=template_js/parse.js&i=0', function() { })});
        load.push({id:'ujs_transform',w:appudo.postPlain('/edit/v1/8/3/'+appudo.random(), 'f=template_js/transform.js&i=0', function() { })});
        load.push({id:'ujs_scope',w:appudo.postPlain('/edit/v1/8/3/'+appudo.random(), 'f=template_js/scope.js&i=0', function() { })});
        load.push({id:'ujs_output',w:appudo.postPlain('/edit/v1/8/3/'+appudo.random(), 'f=template_js/output.js&i=0', function() { })});
        load.push({id:'ujs_compress',w:appudo.postPlain('/edit/v1/8/3/'+appudo.random(), 'f=template_js/compress.js&i=0', function() { })});
        load.push({id:'ujs_propmangle',w:appudo.postPlain('/edit/v1/8/3/'+appudo.random(), 'f=template_js/propmangle.js&i=0', function() { })});
        
        loadwait(0, function() {
            dowait(0, function() {
                window.Handlebars = window.module.exports;
                intxt = fixTxt(intxt);
                var node = dojo.create("iframe", {'style':'display:hidden;', 'srcdoc':intxt}, dojo.body());
                node.onload = function() {
                    var after = function() {
                        node.remove();
                        removeLoad();
                    }
                    try {
                        var doc = appudo.getDoc(node);
                        patchNode(doc);
                        var head = doc.getElementsByTagName("head")[0];
                        var el = doc.createElement('script');
                        el.textContent = '"###tmpl_data###"';
                        head.appendChild(el);
                        intxt = docType(doc) + doc.documentElement.outerHTML;
                        intxt = intxt.replace('"###tmpl_data###"', tmpl_data);
                        result(intxt);
                        after();
                    } catch(e) {
                        result('');
                        after();
                        console.log(e);
                    }
                }
            });    
        });
    }
}
